service: ${env:SERVICE_NAME, 'AppSync'}

frameworkVersion: "3"

plugins:
  - serverless-plugin-typescript
  - serverless-appsync-plugin
  - serverless-appsync-simulator
  - serverless-offline

useDotenv: true

package:
  individually: true
  excludeDevDependencies: true
  patterns:
    - "*.graphql"
    - "mapping-templates/*.vtl"

custom:
  serverless-offline:
    httpPort: 3000
    port: 3000
  appsync-simulator:
    location: .build
    apiKey: da2-fakeApiId123456
    watch:
      - "*.graphql"
      - "mapping-templates/*.vtl"
  appSync:
    name: AppSyncExample
    authenticationType: API_KEY
    schema: schema.graphql
    wafConfig:
      enabled: true
      rules:
        - throttle: 200
    apiKeys:
      - name: AppSyncExample-api-key
        description: "NaN AppSync API Key"
        expiresAfter: 1y
    defaultMappingTemplates:
      request: false
      response: response.vtl
    mappingTemplates:
      - type: Query
        dataSource: AppSyncExample_lambdaDataSource
        field: getResource
      - type: Query
        dataSource: AppSyncExample_lambdaDataSource
        field: getResources
      - type: Mutation
        dataSource: AppSyncExample_lambdaDataSource
        field: createResource
    dataSources:
      - type: AWS_LAMBDA
        name: AppSyncExample_lambdaDataSource
        description: "NaN AppSync Lambda DataSource"
        config:
          functionName: AppSyncExampleResolver
    tags:
      name: AppSyncExample

provider:
  name: aws
  stage: local
  runtime: nodejs16.x
  deploymentBucket:
    blockPublicAccess: true
    versioning: true
    serverSideEncryption: AES256

functions:
  AppSyncExampleResolver:
    handler: src/resolvers/handler.graphqlHandler

resources:
  Outputs:
    AppSyncApiUrl:
      Value: !GetAtt GraphQlApi.GraphQLUrl
