service: ${env:SERVICE_NAME}

frameworkVersion: "3"

plugins:
  - serverless-python-requirements
  - serverless-s3-local
  - serverless-offline
  - ./plugins/serverless-offline-python-requirements

useDotenv: true

package:
  individually: true
  excludeDevDependencies: true
  include:
    - "!./**"
    - "**/*.py"
  exclude:
    - "**"

custom:
  pythonRequirements:
    usePipenv: true
  serverless-offline:
    httpPort: 3000
    port: 3000
  s3:
    host: localhost
    port: 8000
    directory: ${env:LOCAL_S3_PATH, '/tmp'}
    accessKeyId: S3RVER
    secretAccessKey: S3RVER
    buckets:
      - ${env:S3_EXTRA_BUCKET_NAME}

provider:
  name: aws
  stage: local
  runtime: python3.9
  deploymentBucket:
    blockPublicAccess: true
    versioning: true
    serverSideEncryption: AES256
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
      Resource:
        - arn:aws:s3:::${env:S3_LAMBDA_TRIGGER_BUCKET_NAME}
        - arn:aws:s3:::${env:S3_LAMBDA_TRIGGER_BUCKET_NAME}/*
        - arn:aws:s3:::${env:S3_EXTRA_BUCKET_NAME}
        - arn:aws:s3:::${env:S3_EXTRA_BUCKET_NAME}/*

functions:
  slsS3LocalExampleResolver:
    handler: on-object-created.handler
    runtime: python3.9
    module: src/handlers/s3
    events:
      - s3:
          bucket: ${env:S3_LAMBDA_TRIGGER_BUCKET_NAME}
          event: s3:ObjectCreated:*
          # rules:
          #   - prefix: uploads/
          #   - suffix: .jpg

resources:
  Resources:
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${env:S3_EXTRA_BUCKET_NAME}

  Outputs:
    S3BucketNameOutputKey:
      Value: !Ref S3Bucket
